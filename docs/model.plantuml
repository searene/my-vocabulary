@startuml My Vocabulary

package domain {
    top to bottom direction
    package freshDict {
        class ConvertDictResourceService implements IBeforeSaveCardHook
    }
    package card {
        interface IBeforeSaveCardHook {
            + process(Card): void
        }
        Card --> BeforeSaveCardHook::process
        class CardInstance {
            - id: number
            + {static} getNextDueCardInstance(bookId): CardInstance | undefined
            + {static} getTotalDueCardInstanceCount(bookId): number
        }
        CardInstance "*" *-- "1" Card
        CardInstance "*" *-- "1" Composition
        class CardType {
            - id: number
            - name: string
        }
        class FieldType {
            - id: number
            - name: string
            - category: string
        }
        FieldType "*" *-- "1" CardType
        note right of FieldType::category
        Including google-image/word
        end note
        class Composition {
            - id: number
            - frontFields: Field[]
            - backFields: Field[]
        }
        Composition "1" o-- "*" Field
        CardType "1" o-- "*" Composition
        class Card {
            - id: number
            - bookId: number
            + {static} createEmptyCard(bookId): Card
            + save(): Card
        }
        Card "*" *-- "1" CardType
        class Field {
            - id: number
            - contents: string
            + update()
        }
        Card "1" o-- "*" Field
        Field "*" o-- "1" FieldType
        class Review {
            - id: number
            - reviewTime: Date
            + save()
        }
        CardInstance "1" --o "*" Review
        enum Level {
            EASY
            GOOD
            HARD
            FORGOTTEN
        }
        Review "1" *-- "1" Level
    }
    package schedule {
        interface Scheduler {
            + getNextReview(CardInstance): Map<Level, Review>
        }
        class DefaultScheduler implements Scheduler {
        }
    }
}

package Infrastructure {
  package repository {
      interface Repository<Entity> {
          + save(Entity[]): Entity[]
      }
      interface RepositoryFactory {
          + getRepository<Entity>(ObjectType<Entity>): Repository<Entity>
      }
      package typeOrm {
          class TypeOrmRepository<Entity> implements Repository
          class TypeOrmRepositoryFactory implements RepositoryFactory
      }
      RepositoryFactory -left-> Repository
  }
  package entity {
      class BaseEntity {
          - id: number
      }
      class CardInstanceEntity extends BaseEntity {
          - cardId: number
          - compositionId: number
      }
      class CardEntity extends BaseEntity {
          - bookId: number
          - cardTypeId: number
      }
      class FieldEntity extends BaseEntity {
          - cardId: number
          - contents: string
      }
      class ReviewEntity extends BaseEntity {
          - cardInstanceId: number
          - reviewTime: string
          - level: Level
          - isDone: Boolean
      }
      class CardTypeEntity extends BaseEntity {
          - name: string
      }
      class FieldTypeEntity extends BaseEntity {
          - cardTypeId: number
          - name: string
          - category: string
      }
      class CompositionEntity extends BaseEntity {
          - frontFieldIdList: string
          - backFieldIdList: string
      }
      class ConfigEntity extends BaseEntity {
          - defaultCardTypeId: number
      }
  }
}
@enduml