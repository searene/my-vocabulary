"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Optional = (function () {
    function Optional() {
    }
    Optional.prototype.isEmpty = function () {
        return !this.isPresent();
    };
    Optional.of = function (value) {
        if (value !== null && value !== undefined)
            return new PresentOptional(value);
        else
            throw new TypeError("The passed value was null or undefined.");
    };
    Optional.ofNonNull = function (value) {
        return Optional.of(value);
    };
    Optional.ofNullable = function (nullable) {
        if (nullable !== null && nullable !== undefined)
            return new PresentOptional(nullable);
        else
            return new EmptyOptional();
    };
    Optional.empty = function () {
        return new EmptyOptional();
    };
    Optional.from = function (option) {
        switch (option.kind) {
            case "present": return Optional.of(option.value);
            case "empty": return Optional.empty();
            default: throw new TypeError("The passed value was not an Option type.");
        }
    };
    return Optional;
}());
exports.Optional = Optional;
var PresentOptional = (function (_super) {
    __extends(PresentOptional, _super);
    function PresentOptional(value) {
        var _this = _super.call(this) || this;
        _this.payload = value;
        return _this;
    }
    PresentOptional.prototype.isPresent = function () {
        return true;
    };
    PresentOptional.prototype.get = function () {
        return this.payload;
    };
    PresentOptional.prototype.ifPresent = function (consumer) {
        consumer(this.payload);
    };
    PresentOptional.prototype.ifPresentOrElse = function (consumer, emptyAction) {
        consumer(this.payload);
    };
    PresentOptional.prototype.filter = function (predicate) {
        return (predicate(this.payload)) ? this : Optional.empty();
    };
    PresentOptional.prototype.map = function (mapper) {
        var result = mapper(this.payload);
        return Optional.ofNullable(result);
    };
    PresentOptional.prototype.flatMap = function (mapper) {
        return mapper(this.payload);
    };
    PresentOptional.prototype.or = function (supplier) {
        return this;
    };
    PresentOptional.prototype.orElse = function (another) {
        return this.payload;
    };
    PresentOptional.prototype.orElseGet = function (another) {
        return this.payload;
    };
    PresentOptional.prototype.orElseThrow = function (exception) {
        return this.payload;
    };
    PresentOptional.prototype.orNull = function () {
        return this.payload;
    };
    PresentOptional.prototype.orUndefined = function () {
        return this.payload;
    };
    PresentOptional.prototype.toOption = function () {
        return { kind: "present", value: this.payload };
    };
    PresentOptional.prototype.matches = function (cases) {
        return cases.present(this.payload);
    };
    PresentOptional.prototype.toJSON = function (key) {
        return this.payload;
    };
    return PresentOptional;
}(Optional));
var EmptyOptional = (function (_super) {
    __extends(EmptyOptional, _super);
    function EmptyOptional() {
        return _super.call(this) || this;
    }
    EmptyOptional.prototype.isPresent = function () {
        return false;
    };
    EmptyOptional.prototype.get = function () {
        throw new TypeError("The optional is not present.");
    };
    EmptyOptional.prototype.ifPresent = function (consumer) {
    };
    EmptyOptional.prototype.ifPresentOrElse = function (consumer, emptyAction) {
        emptyAction();
    };
    EmptyOptional.prototype.filter = function (predicate) {
        return this;
    };
    EmptyOptional.prototype.map = function (mapper) {
        return Optional.empty();
    };
    EmptyOptional.prototype.flatMap = function (mapper) {
        return Optional.empty();
    };
    EmptyOptional.prototype.or = function (supplier) {
        return supplier();
    };
    EmptyOptional.prototype.orElse = function (another) {
        return another;
    };
    EmptyOptional.prototype.orElseGet = function (another) {
        return this.orElse(another());
    };
    EmptyOptional.prototype.orElseThrow = function (exception) {
        throw exception();
    };
    EmptyOptional.prototype.orNull = function () {
        return null;
    };
    EmptyOptional.prototype.orUndefined = function () {
        return undefined;
    };
    EmptyOptional.prototype.toOption = function () {
        return { kind: "empty" };
    };
    EmptyOptional.prototype.matches = function (cases) {
        return cases.empty();
    };
    EmptyOptional.prototype.toJSON = function (key) {
        return null;
    };
    return EmptyOptional;
}(Optional));
//# sourceMappingURL=optional.js.map